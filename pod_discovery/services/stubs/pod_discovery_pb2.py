# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: pod_discovery.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='pod_discovery.proto',
  package='pod_discovery',
  syntax='proto3',
  serialized_pb=_b('\n\x13pod_discovery.proto\x12\rpod_discovery\"\x1d\n\x07PodName\x12\x12\n\nvanity_url\x18\x01 \x01(\t\"%\n\x0eListPodRequest\x12\x13\n\x0b\x65nvironment\x18\x01 \x01(\t\"K\n\x03Pod\x12\x10\n\x08pod_name\x18\x01 \x01(\t\x12\x12\n\nvanity_url\x18\x02 \x01(\t\x12\x0f\n\x07\x63luster\x18\x03 \x01(\t\x12\r\n\x05group\x18\x04 \x01(\t2\x89\x01\n\x0cPodDiscovery\x12\x36\n\x06GetPod\x12\x16.pod_discovery.PodName\x1a\x12.pod_discovery.Pod\"\x00\x12\x41\n\x08ListPods\x12\x1d.pod_discovery.ListPodRequest\x1a\x12.pod_discovery.Pod\"\x00\x30\x01\x42\t\xa2\x02\x06PODDSCb\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_PODNAME = _descriptor.Descriptor(
  name='PodName',
  full_name='pod_discovery.PodName',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='vanity_url', full_name='pod_discovery.PodName.vanity_url', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=38,
  serialized_end=67,
)


_LISTPODREQUEST = _descriptor.Descriptor(
  name='ListPodRequest',
  full_name='pod_discovery.ListPodRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='environment', full_name='pod_discovery.ListPodRequest.environment', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=69,
  serialized_end=106,
)


_POD = _descriptor.Descriptor(
  name='Pod',
  full_name='pod_discovery.Pod',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='pod_name', full_name='pod_discovery.Pod.pod_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='vanity_url', full_name='pod_discovery.Pod.vanity_url', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='cluster', full_name='pod_discovery.Pod.cluster', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='group', full_name='pod_discovery.Pod.group', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=108,
  serialized_end=183,
)

DESCRIPTOR.message_types_by_name['PodName'] = _PODNAME
DESCRIPTOR.message_types_by_name['ListPodRequest'] = _LISTPODREQUEST
DESCRIPTOR.message_types_by_name['Pod'] = _POD

PodName = _reflection.GeneratedProtocolMessageType('PodName', (_message.Message,), dict(
  DESCRIPTOR = _PODNAME,
  __module__ = 'pod_discovery_pb2'
  # @@protoc_insertion_point(class_scope:pod_discovery.PodName)
  ))
_sym_db.RegisterMessage(PodName)

ListPodRequest = _reflection.GeneratedProtocolMessageType('ListPodRequest', (_message.Message,), dict(
  DESCRIPTOR = _LISTPODREQUEST,
  __module__ = 'pod_discovery_pb2'
  # @@protoc_insertion_point(class_scope:pod_discovery.ListPodRequest)
  ))
_sym_db.RegisterMessage(ListPodRequest)

Pod = _reflection.GeneratedProtocolMessageType('Pod', (_message.Message,), dict(
  DESCRIPTOR = _POD,
  __module__ = 'pod_discovery_pb2'
  # @@protoc_insertion_point(class_scope:pod_discovery.Pod)
  ))
_sym_db.RegisterMessage(Pod)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\242\002\006PODDSC'))
try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class PodDiscoveryStub(object):
    """Interface exported by the server.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.GetPod = channel.unary_unary(
          '/pod_discovery.PodDiscovery/GetPod',
          request_serializer=PodName.SerializeToString,
          response_deserializer=Pod.FromString,
          )
      self.ListPods = channel.unary_stream(
          '/pod_discovery.PodDiscovery/ListPods',
          request_serializer=ListPodRequest.SerializeToString,
          response_deserializer=Pod.FromString,
          )


  class PodDiscoveryServicer(object):
    """Interface exported by the server.
    """

    def GetPod(self, request, context):
      """Obtain extensive details of a Pod based on Vanity name.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ListPods(self, request, context):
      """A server-to-client streaming RPC.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_PodDiscoveryServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetPod': grpc.unary_unary_rpc_method_handler(
            servicer.GetPod,
            request_deserializer=PodName.FromString,
            response_serializer=Pod.SerializeToString,
        ),
        'ListPods': grpc.unary_stream_rpc_method_handler(
            servicer.ListPods,
            request_deserializer=ListPodRequest.FromString,
            response_serializer=Pod.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'pod_discovery.PodDiscovery', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaPodDiscoveryServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Interface exported by the server.
    """
    def GetPod(self, request, context):
      """Obtain extensive details of a Pod based on Vanity name.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ListPods(self, request, context):
      """A server-to-client streaming RPC.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaPodDiscoveryStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Interface exported by the server.
    """
    def GetPod(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Obtain extensive details of a Pod based on Vanity name.
      """
      raise NotImplementedError()
    GetPod.future = None
    def ListPods(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """A server-to-client streaming RPC.
      """
      raise NotImplementedError()


  def beta_create_PodDiscovery_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('pod_discovery.PodDiscovery', 'GetPod'): PodName.FromString,
      ('pod_discovery.PodDiscovery', 'ListPods'): ListPodRequest.FromString,
    }
    response_serializers = {
      ('pod_discovery.PodDiscovery', 'GetPod'): Pod.SerializeToString,
      ('pod_discovery.PodDiscovery', 'ListPods'): Pod.SerializeToString,
    }
    method_implementations = {
      ('pod_discovery.PodDiscovery', 'GetPod'): face_utilities.unary_unary_inline(servicer.GetPod),
      ('pod_discovery.PodDiscovery', 'ListPods'): face_utilities.unary_stream_inline(servicer.ListPods),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_PodDiscovery_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('pod_discovery.PodDiscovery', 'GetPod'): PodName.SerializeToString,
      ('pod_discovery.PodDiscovery', 'ListPods'): ListPodRequest.SerializeToString,
    }
    response_deserializers = {
      ('pod_discovery.PodDiscovery', 'GetPod'): Pod.FromString,
      ('pod_discovery.PodDiscovery', 'ListPods'): Pod.FromString,
    }
    cardinalities = {
      'GetPod': cardinality.Cardinality.UNARY_UNARY,
      'ListPods': cardinality.Cardinality.UNARY_STREAM,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'pod_discovery.PodDiscovery', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
