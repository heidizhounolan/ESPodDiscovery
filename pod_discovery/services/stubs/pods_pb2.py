# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: pods.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='pods.proto',
  package='pod_discovery',
  syntax='proto3',
  serialized_pb=_b('\n\x0bpods.proto\x12\x13pod_discovery\".\n\x04Pod\x12\n\n\x02id\x18\x01 \x01(\x05\x12\x0c\n\x04\x63ode\x18\x02 \x01(\t\x12\x0c\n\x04name\x18\x03 \x01(\t\"\x1c\n\x0eGetPodRequest\x12\n\n\x02id\x18\x01 \x01(\x05\":\n\x0fGetPodResponse\x12\'\n\x04pod\x18\x01 \x01(\x0b\x32\x19.pod_discovery.Pod2d\n\nPodMaster\x12V\n\x07GetPod\x12#.pod_discovery.GetPodRequest\x1a$.pod_discovery.GetPodResponse\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_ITEM = _descriptor.Descriptor(
  name='Pod',
  full_name='pod_discovery.Pod',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='pod_discovery.Pod.id', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='code', full_name='pod_discovery.Pod.code', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='name', full_name='pod_discovery.Pod.name', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=36,
  serialized_end=82,
)


_GETITEMREQUEST = _descriptor.Descriptor(
  name='GetPodRequest',
  full_name='pod_discovery.GetPodRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='pod_discovery.GetPodRequest.id', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=84,
  serialized_end=112,
)


_GETITEMRESPONSE = _descriptor.Descriptor(
  name='GetPodResponse',
  full_name='pod_discovery.GetPodResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='pod', full_name='pod_discovery.GetPodResponse.pod', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=114,
  serialized_end=172,
)

_GETITEMRESPONSE.fields_by_name['pod'].message_type = _ITEM
DESCRIPTOR.message_types_by_name['Pod'] = _ITEM
DESCRIPTOR.message_types_by_name['GetPodRequest'] = _GETITEMREQUEST
DESCRIPTOR.message_types_by_name['GetPodResponse'] = _GETITEMRESPONSE

Pod = _reflection.GeneratedProtocolMessageType('Pod', (_message.Message,), dict(
  DESCRIPTOR = _ITEM,
  __module__ = 'pods_pb2'
  # @@protoc_insertion_point(class_scope:pod_discovery.Pod)
  ))
_sym_db.RegisterMessage(Pod)

GetPodRequest = _reflection.GeneratedProtocolMessageType('GetPodRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETITEMREQUEST,
  __module__ = 'pods_pb2'
  # @@protoc_insertion_point(class_scope:pod_discovery.GetPodRequest)
  ))
_sym_db.RegisterMessage(GetPodRequest)

GetPodResponse = _reflection.GeneratedProtocolMessageType('GetPodResponse', (_message.Message,), dict(
  DESCRIPTOR = _GETITEMRESPONSE,
  __module__ = 'pods_pb2'
  # @@protoc_insertion_point(class_scope:pod_discovery.GetPodResponse)
  ))
_sym_db.RegisterMessage(GetPodResponse)


import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class PodMasterStub(object):
  """Manages pod data.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetPod = channel.unary_unary(
        '/pod_discovery.PodMaster/GetPod',
        request_serializer=GetPodRequest.SerializeToString,
        response_deserializer=GetPodResponse.FromString,
        )


class PodMasterServicer(object):
  """Manages pod data.
  """

  def GetPod(self, request, context):
    """Get an pod by id.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PodMasterServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetPod': grpc.unary_unary_rpc_method_handler(
          servicer.GetPod,
          request_deserializer=GetPodRequest.FromString,
          response_serializer=GetPodResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'pod_discovery.PodMaster', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaPodMasterServicer(object):
  """Manages pod data.
  """
  def GetPod(self, request, context):
    """Get an pod by id.
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaPodMasterStub(object):
  """Manages pod data.
  """
  def GetPod(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """Get an pod by id.
    """
    raise NotImplementedError()
  GetPod.future = None


def beta_create_PodMaster_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('pod_discovery.PodMaster', 'GetPod'): GetPodRequest.FromString,
  }
  response_serializers = {
    ('pod_discovery.PodMaster', 'GetPod'): GetPodResponse.SerializeToString,
  }
  method_implementations = {
    ('pod_discovery.PodMaster', 'GetPod'): face_utilities.unary_unary_inline(servicer.GetPod),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_PodMaster_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('pod_discovery.PodMaster', 'GetPod'): GetPodRequest.SerializeToString,
  }
  response_deserializers = {
    ('pod_discovery.PodMaster', 'GetPod'): GetPodResponse.FromString,
  }
  cardinalities = {
    'GetPod': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'pod_discovery.PodMaster', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
